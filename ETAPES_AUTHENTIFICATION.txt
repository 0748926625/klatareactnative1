================================================================================
                    GUIDE D'IMPL√âMENTATION - SYST√àME D'AUTHENTIFICATION
================================================================================

üìã PR√âREQUIS :
- AsyncStorage est d√©j√† install√©
- Le fichier App.tsx est fonctionnel

================================================================================
√âTAPE 1 : AJOUTER LES IMPORTS N√âCESSAIRES
================================================================================

Dans App.tsx, ligne 1-12, MODIFIER les imports :

import React, { useRef, useState, useEffect } from 'react';
import { StyleSheet, View, Text, Animated, PanResponder, Dimensions, TouchableOpacity, ImageBackground, Image, Easing, FlatList, ScrollView, TextInput, Alert } from 'react-native';
import * as ScreenOrientation from 'expo-screen-orientation';
import * as Speech from 'expo-speech';
import AsyncStorage from '@react-native-async-storage/async-storage';
import bgsta from './assets/backgrounds/bgsta.png';
import sky1 from './assets/backgrounds/sky1.png';
import zadiSprite from './assets/sprites/zadi.png';
import splashImage from './assets/splash.jpg';
import fireballImage from './assets/images/fireball.png';
import { Audio } from 'expo-av';
import MathRenderer from './MathRenderer';

================================================================================
√âTAPE 2 : AJOUTER LES INTERFACES TYPESCRIPT
================================================================================

Apr√®s les interfaces existantes (vers ligne 1040), AJOUTER :

interface User {
  username: string;
  password: string;
  createdAt: string;
}

interface UserStats {
  totalGames: number;
  totalScore: number;
  bestScore: number;
  chaptersCompleted: string[];
  chapterHistory: { [key: string]: GameHistory[] };
  failedQuestions: Question[];
}

================================================================================
√âTAPE 3 : AJOUTER LES √âTATS D'AUTHENTIFICATION
================================================================================

Dans la fonction App(), apr√®s les √©tats existants (vers ligne 1047), AJOUTER :

const [isAuthenticated, setIsAuthenticated] = useState(false);
const [currentUser, setCurrentUser] = useState<User | null>(null);
const [showAuth, setShowAuth] = useState(false);
const [isLoginMode, setIsLoginMode] = useState(true);
const [username, setUsername] = useState('');
const [password, setPassword] = useState('');
const [authError, setAuthError] = useState('');

================================================================================
√âTAPE 4 : AJOUTER LES FONCTIONS D'AUTHENTIFICATION
================================================================================

Avant le rendu (vers ligne 1524), AJOUTER ces fonctions :

// --- FONCTIONS D'AUTHENTIFICATION ---

const checkExistingUser = async (username: string): Promise<User | null> => {
  try {
    const usersJson = await AsyncStorage.getItem('users');
    if (usersJson) {
      const users: User[] = JSON.parse(usersJson);
      return users.find(user => user.username === username) || null;
    }
    return null;
  } catch (error) {
    console.error('Erreur lors de la v√©rification utilisateur:', error);
    return null;
  }
};

const saveUser = async (user: User): Promise<boolean> => {
  try {
    const usersJson = await AsyncStorage.getItem('users');
    let users: User[] = [];
    if (usersJson) {
      users = JSON.parse(usersJson);
    }
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = users.find(u => u.username === user.username);
    if (existingUser) {
      return false;
    }
    
    users.push(user);
    await AsyncStorage.setItem('users', JSON.stringify(users));
    return true;
  } catch (error) {
    console.error('Erreur lors de la sauvegarde utilisateur:', error);
    return false;
  }
};

const authenticateUser = async (username: string, password: string): Promise<User | null> => {
  try {
    const user = await checkExistingUser(username);
    if (user && user.password === password) {
      return user;
    }
    return null;
  } catch (error) {
    console.error('Erreur lors de l\'authentification:', error);
    return null;
  }
};

const handleAuth = async () => {
  if (!username.trim() || !password.trim()) {
    setAuthError('Veuillez remplir tous les champs');
    return;
  }

  setAuthError('');

  if (isLoginMode) {
    // Mode connexion
    const user = await authenticateUser(username, password);
    if (user) {
      setCurrentUser(user);
      setIsAuthenticated(true);
      setShowAuth(false);
      setUsername('');
      setPassword('');
    } else {
      setAuthError('Nom d\'utilisateur ou mot de passe incorrect');
    }
  } else {
    // Mode inscription
    const existingUser = await checkExistingUser(username);
    if (existingUser) {
      setAuthError('Ce nom d\'utilisateur existe d√©j√†');
      return;
    }

    const newUser: User = {
      username: username.trim(),
      password: password,
      createdAt: new Date().toISOString(),
    };

    const saved = await saveUser(newUser);
    if (saved) {
      setCurrentUser(newUser);
      setIsAuthenticated(true);
      setShowAuth(false);
      setUsername('');
      setPassword('');
    } else {
      setAuthError('Erreur lors de la cr√©ation du compte');
    }
  }
};

const handleLogout = () => {
  setCurrentUser(null);
  setIsAuthenticated(false);
  setSelectedChapter(null);
  setShowAuth(false);
  setUsername('');
  setPassword('');
  setAuthError('');
};

const showAuthScreen = () => {
  setShowAuth(true);
  setIsLoginMode(true);
  setAuthError('');
};

================================================================================
√âTAPE 5 : AJOUTER L'√âCRAN D'AUTHENTIFICATION
================================================================================

Apr√®s le splash screen et avant le menu (vers ligne 1687), AJOUTER :

if (showAuth) {
  return (
    <View style={styles.authContainer}>
      <ImageBackground source={splashImage} style={styles.authBackground} resizeMode="cover">
        <View style={styles.authOverlay}>
          <View style={styles.authBox}>
            <Text style={styles.authTitle}>
              {isLoginMode ? 'üîê Connexion' : 'üìù Inscription'}
            </Text>
            
            <View style={styles.authForm}>
              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>üë§ Nom d'utilisateur</Text>
                <TextInput
                  style={styles.textInput}
                  value={username}
                  onChangeText={setUsername}
                  placeholder="Ex: Aya123"
                  placeholderTextColor="#999"
                  autoCapitalize="none"
                  autoCorrect={false}
                />
              </View>

              <View style={styles.inputContainer}>
                <Text style={styles.inputLabel}>üîí Mot de passe</Text>
                <TextInput
                  style={styles.textInput}
                  value={password}
                  onChangeText={setPassword}
                  placeholder="Votre mot de passe"
                  placeholderTextColor="#999"
                  secureTextEntry
                  autoCapitalize="none"
                  autoCorrect={false}
                />
              </View>

              {authError ? (
                <Text style={styles.errorText}>‚ùå {authError}</Text>
              ) : null}

              <View style={styles.authButtons}>
                <TouchableOpacity 
                  style={[styles.authButton, styles.primaryButton]} 
                  onPress={handleAuth}
                >
                  <Text style={styles.primaryButtonText}>
                    {isLoginMode ? 'Se connecter' : 'S\'inscrire'}
                  </Text>
                </TouchableOpacity>

                <TouchableOpacity 
                  style={[styles.authButton, styles.secondaryButton]} 
                  onPress={() => {
                    setIsLoginMode(!isLoginMode);
                    setAuthError('');
                    setUsername('');
                    setPassword('');
                  }}
                >
                  <Text style={styles.secondaryButtonText}>
                    {isLoginMode ? 'Cr√©er un compte' : 'D√©j√† inscrit ?'}
                  </Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </View>
      </ImageBackground>
    </View>
  );
}

================================================================================
√âTAPE 6 : MODIFIER LE MENU PRINCIPAL
================================================================================

Dans le menu des chapitres (vers ligne 2100), AVANT le titre "Choisis un chapitre", AJOUTER :

{/* Barre de statut utilisateur */}
{isAuthenticated && currentUser && (
  <View style={styles.userStatusBar}>
    <Text style={styles.userStatusText}>
      ‚úÖ Connect√© en tant que <Text style={styles.usernameText}>{currentUser.username}</Text>
    </Text>
    <TouchableOpacity style={styles.logoutButton} onPress={handleLogout}>
      <Text style={styles.logoutButtonText}>üö™ D√©connexion</Text>
    </TouchableOpacity>
  </View>
)}

{!isAuthenticated && (
  <TouchableOpacity style={styles.loginPromptButton} onPress={showAuthScreen}>
    <Text style={styles.loginPromptText}>üîê Se connecter pour sauvegarder ses progr√®s</Text>
  </TouchableOpacity>
)}

================================================================================
√âTAPE 7 : AJOUTER LES STYLES
================================================================================

√Ä la fin du fichier, dans StyleSheet.create (vers ligne 2300), AJOUTER :

// Styles d'authentification
authContainer: {
  flex: 1,
  backgroundColor: '#000',
},
authBackground: {
  flex: 1,
  width: '100%',
  height: '100%',
},
authOverlay: {
  flex: 1,
  backgroundColor: 'rgba(0, 0, 0, 0.7)',
  justifyContent: 'center',
  alignItems: 'center',
  padding: 20,
},
authBox: {
  backgroundColor: 'rgba(255, 255, 255, 0.95)',
  borderRadius: 20,
  padding: 30,
  width: '100%',
  maxWidth: 400,
  elevation: 10,
  shadowColor: '#000',
  shadowOffset: { width: 0, height: 5 },
  shadowOpacity: 0.3,
  shadowRadius: 10,
},
authTitle: {
  fontSize: 28,
  fontWeight: 'bold',
  color: '#1976d2',
  textAlign: 'center',
  marginBottom: 25,
},
authForm: {
  width: '100%',
},
inputContainer: {
  marginBottom: 20,
},
inputLabel: {
  fontSize: 16,
  fontWeight: '600',
  color: '#333',
  marginBottom: 8,
},
textInput: {
  borderWidth: 2,
  borderColor: '#ddd',
  borderRadius: 10,
  padding: 15,
  fontSize: 16,
  backgroundColor: '#fff',
  color: '#333',
},
errorText: {
  color: '#d32f2f',
  fontSize: 14,
  textAlign: 'center',
  marginBottom: 15,
  fontWeight: '500',
},
authButtons: {
  gap: 15,
},
authButton: {
  paddingVertical: 15,
  paddingHorizontal: 20,
  borderRadius: 10,
  alignItems: 'center',
  elevation: 3,
},
primaryButton: {
  backgroundColor: '#1976d2',
},
primaryButtonText: {
  color: '#fff',
  fontSize: 18,
  fontWeight: 'bold',
},
secondaryButton: {
  backgroundColor: 'transparent',
  borderWidth: 2,
  borderColor: '#1976d2',
},
secondaryButtonText: {
  color: '#1976d2',
  fontSize: 16,
  fontWeight: '600',
},

// Styles pour la barre de statut utilisateur
userStatusBar: {
  flexDirection: 'row',
  justifyContent: 'space-between',
  alignItems: 'center',
  backgroundColor: 'rgba(25, 118, 210, 0.1)',
  paddingHorizontal: 20,
  paddingVertical: 10,
  borderRadius: 10,
  marginBottom: 20,
  borderWidth: 1,
  borderColor: 'rgba(25, 118, 210, 0.3)',
},
userStatusText: {
  fontSize: 16,
  color: '#1976d2',
  fontWeight: '600',
},
usernameText: {
  fontWeight: 'bold',
  color: '#1565c0',
},
logoutButton: {
  backgroundColor: '#f44336',
  paddingHorizontal: 15,
  paddingVertical: 8,
  borderRadius: 8,
},
logoutButtonText: {
  color: '#fff',
  fontSize: 14,
  fontWeight: 'bold',
},
loginPromptButton: {
  backgroundColor: 'rgba(255, 193, 7, 0.2)',
  paddingHorizontal: 20,
  paddingVertical: 12,
  borderRadius: 10,
  marginBottom: 20,
  borderWidth: 1,
  borderColor: 'rgba(255, 193, 7, 0.5)',
},
loginPromptText: {
  color: '#f57c00',
  fontSize: 16,
  fontWeight: '600',
  textAlign: 'center',
},

================================================================================
√âTAPE 8 : CORRIGER LES ERREURS DE STYLE
================================================================================

Dans StyleSheet.create, SUPPRIMER le style "projectile" dupliqu√© (ligne 2313-2320).

Dans le style "splashOverlay", SUPPRIMER le bloc "backgroundGradient" (lignes 2383-2386).

================================================================================
FONCTIONNALIT√âS AJOUT√âES :
================================================================================

‚úÖ Page de connexion/inscription √©l√©gante
‚úÖ Gestion des comptes utilisateurs avec stockage local
‚úÖ Syst√®me d'authentification s√©curis√©
‚úÖ Affichage du statut connect√© dans le menu
‚úÖ Bouton de d√©connexion
‚úÖ Messages d'erreur appropri√©s
‚úÖ Interface utilisateur intuitive

================================================================================
TEST DE LA FONCTIONNALIT√â :
================================================================================

1. Lancer l'application
2. Cliquer sur "Se connecter pour sauvegarder ses progr√®s"
3. Cr√©er un nouveau compte avec nom d'utilisateur et mot de passe
4. V√©rifier que le statut "Connect√© en tant que [Nom]" s'affiche
5. Tester la d√©connexion
6. Tester la reconnexion avec les m√™mes identifiants
7. Tester les messages d'erreur (mauvais mot de passe, utilisateur existant)

================================================================================
NOTES IMPORTANTES :
================================================================================

- Les donn√©es utilisateurs sont stock√©es localement avec AsyncStorage
- Le syst√®me est s√©curis√© pour un usage √©ducatif
- L'interface est responsive et s'adapte √† diff√©rentes tailles d'√©cran
- Les animations sont fluides et professionnelles
- Le code est bien structur√© et maintenable

================================================================================ 